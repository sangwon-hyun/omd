% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/landcrossing.R
\name{check_if_close_to_land}
\alias{check_if_close_to_land}
\title{Helper function}
\usage{
check_if_close_to_land(x, y, land_coord, dst)
}
\description{
Helper function
}
\examples{
\dontrun{
## Sample settings
land_coords = rbind(c(lon = -115.75, lat = 30.25),
                    c(lon = -115.75, lat = 32.25),
                    c(lon = -115.75, lat = 34.25),
                    c(lon = -115.75, lat = 36.25),
                    c(lon = -115.75, lat = 38.25),
                    c(lon = -115.75, lat = 40.25),
                    c(lon = -115.75, lat = 42.25),
                    c(lon = -117.75, lat = 34.25),
                    c(lon = -117.75, lat = 36.25),
                    c(lon = -117.75, lat = 38.25),
                    c(lon = -117.75, lat = 40.25),
                    c(lon = -117.75, lat = 42.25),
                    c(lon = -119.75, lat = 36.25),
                    c(lon = -119.75, lat = 38.25),
                    c(lon = -119.75, lat = 40.25),
                    c(lon = -119.75, lat = 42.25))

one_unit = 2
orig = c(x0 = -115.75,
         y0 = 26.25,
         x1 = -115.75,
         y1 = 32.25)
list_of_ports = list(orig + one_unit * c(-1, 3, 1, 0),
                     orig + one_unit * c(-1, 3, 1, 3),
                     orig + one_unit * c(-2, 3, 1, 4),
                     orig + one_unit * c(-2, 3, 1, 10),
                     orig + one_unit * c(-2, 3, 1, -4),
                     orig + one_unit * c(-2, 3, 1, -3),
                     orig + one_unit * c(-2, 3, 1, -2),
                     c(x0 = -115.75, y0 = 42.25, x1 = -119.75, y1 = 40.25))

par(mfrow = c(2,4))
for(ii in 1:8){
  ports = list_of_ports[[ii]]
  ylim = c(24.25, 42.25)
  xlim = c(-119.75, -111.75)
  plot(x = c(ports["x0"], ports["x1"]),
       y = c(ports["y0"], ports["y1"]),
       type = 'o',
       xlim = xlim, ylim = ylim,
       ylab = "lat",
       xlab = "lon", lwd=2)
  abline(v=seq(from=xlim[1], to=xlim[2], by=one_unit), col=rgb(0,0,0,0.5))
  abline(h=seq(from=ylim[1], to=ylim[2], by=one_unit), col=rgb(0,0,0,0.5))
  all_points = get_all_in_btw_points(ports["x0"],
                                     ports["y0"],
                                     ports["x1"],
                                     ports["y1"], one_unit)
  points(all_points, pch = 3)
  points(land_coords, pch = 16, col='green', cex = 2)

  nn = nrow(land_coords)
  all_close_to_land = sapply(1:nn, function(ii){
    land_coord =  land_coords[ii,] \%>\% dplyr::select(lon, lat) \%>\% unlist()
    close_to_land = apply(all_points, 1, function(one_point){
      check_if_close_to_land(x = one_point["lon"],
                             y = one_point["lat"], land_coord, one_unit/2)
    })
    points(all_points[which(close_to_land),], col='red', pch=3, cex=3)
    return(any(close_to_land))
  })
  legend("bottomright", col = c("green", "red"),
         pch = c(16, 3),
         cex = c(1, 1),
         bg = "white",
         legend = c("Land", "Too close to land"))
}
}
}
